@baseUrl = http://127.0.0.1:8000/api
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MjA1NDU0NjkxMX0.bgRqIppFVAX924kYwAE5clyWzla43B9ageS-W6rsJ_M
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MjA1NDU0NjgwMn0.UTicXf0sfRDMZ3BigIWrcauso0zy68g1FkSBrCPto0s

### Get all comments (with pagination, sorting and type filtering)
GET {{baseUrl}}/comments?skip=0&limit=10&sort=-created_at&type=USER
Content-Type: application/json

### Get all official comments
GET {{baseUrl}}/comments?skip=0&limit=10&sort=-created_at&type=OFFICIAL
Content-Type: application/json

### Get all comments for a specific solution with type filtering
GET {{baseUrl}}/comments/solution/docker?skip=0&limit=10&sort_by=created_at&type=USER
Content-Type: application/json

### Create new comment for a solution (requires auth)
POST {{baseUrl}}/comments/solution/docker
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This is a great solution! I've been using it in production for several months now."
}

### Create official comment for a solution (requires admin auth)
POST {{baseUrl}}/comments/solution/docker
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
    "content": "This is an official comment from the admin team.",
    "type": "OFFICIAL"
}

### Try to create comment with type field (type will be ignored)
POST {{baseUrl}}/comments/solution/docker
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Trying to create a comment with type field.",
    "type": "OFFICIAL"
}

### Update comment content as regular user
PUT {{baseUrl}}/comments/67a9e2ff635c6baed5652083
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Updated comment content"
}

### Try to update comment type as regular user (should fail)
PUT {{baseUrl}}/comments/67a9e2ff635c6baed5652083
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Updated content",
    "type": "OFFICIAL"
}

### Update comment type as admin
PUT {{baseUrl}}/comments/67a9e2ff635c6baed5652083
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
    "content": "Updated by admin",
    "type": "OFFICIAL"
}

### Delete comment (requires auth, only author can delete)
DELETE {{baseUrl}}/comments/67a9e2ff635c6baed5652083
Authorization: Bearer {{token}}

### Test error cases

### Try to create comment for non-existent solution (should fail with 404)
POST {{baseUrl}}/comments/solution/non-existent-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This should fail because solution doesn't exist"
}

### Try to create empty comment (should fail with 400)
POST {{baseUrl}}/comments/solution/my-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": ""
}

### Try to create comment with only whitespace (should fail with 400)
POST {{baseUrl}}/comments/solution/my-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "    "
}

### Try to update comment with empty content (should fail with 400)
PUT {{baseUrl}}/comments/id123
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": ""
}

### Try to update comment with only whitespace (should fail with 400)
PUT {{baseUrl}}/comments/id123
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "   "
}

### Try to create too long comment (>1000 chars, should fail with 400)
POST {{baseUrl}}/comments/solution/my-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
}

### Try to update non-existent comment (should fail with 404)
PUT {{baseUrl}}/comments/non-existent-comment
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This should fail because comment doesn't exist"
}

### Try to update comment without auth (should fail with 401)
PUT {{baseUrl}}/comments/id123
Content-Type: application/json

{
    "content": "This should fail without auth token"
}

### Try to update another user's comment (should fail with 403)
PUT {{baseUrl}}/comments/other-users-comment
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This should fail because it's not my comment"
}

### Try to delete non-existent comment (should fail with 404)
DELETE {{baseUrl}}/comments/non-existent-comment
Authorization: Bearer {{token}}

### Try to delete another user's comment (should fail with 403)
DELETE {{baseUrl}}/comments/other-users-comment
Authorization: Bearer {{token}}

### Example responses:

# Get comments response with type
# {
#     "success": true,
#     "data": [
#         {
#             "id": "comment123",
#             "content": "This is a great solution!",
#             "solution_slug": "my-solution",
#             "username": "test",
#             "type": "USER",
#             "created_at": "2024-01-22T10:30:00",
#             "updated_at": "2024-01-22T10:30:00"
#         },
#         {
#             "id": "comment124",
#             "content": "Official response from the team",
#             "solution_slug": "my-solution",
#             "username": "admin",
#             "type": "OFFICIAL",
#             "created_at": "2024-01-22T10:35:00",
#             "updated_at": "2024-01-22T10:35:00"
#         }
#     ],
#     "total": 2,
#     "skip": 0,
#     "limit": 10
# }

# Error - Cannot update type as non-admin
# {
#     "detail": "Only administrators can update comment type"
# }

### Create a comment on a solution
POST {{baseUrl}}/comments/solution/test-solution/comment
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This is a test comment",
    "rating": 5
}

### Get all comments for a solution
GET {{baseUrl}}/comments/solution/test-solution/comments
Content-Type: application/json

### Get comments with pagination
GET {{baseUrl}}/comments/solution/test-solution/comments?skip=0&limit=5
Content-Type: application/json

### Update own comment (should succeed)
PUT {{baseUrl}}/comments/123
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Updated comment content",
    "rating": 4
}

### Try to update another user's comment as non-superuser (should fail)
PUT {{baseUrl}}/comments/456
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "Try to update someone else's comment",
    "rating": 1
}

### Update any comment as superuser (should succeed)
PUT {{baseUrl}}/comments/456
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
    "content": "Admin updating comment",
    "rating": 3
}

### Delete own comment (should succeed)
DELETE {{baseUrl}}/comments/123
Authorization: Bearer {{token}}

### Try to delete another user's comment as non-superuser (should fail)
DELETE {{baseUrl}}/comments/456
Authorization: Bearer {{token}}

### Delete any comment as superuser (should succeed)
DELETE {{baseUrl}}/comments/456
Authorization: Bearer {{adminToken}}

### Test error cases

### Try to create comment on non-existent solution
POST {{baseUrl}}/comments/solution/non-existent/comment
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This should fail",
    "rating": 5
}

### Try to update non-existent comment
PUT {{baseUrl}}/comments/999
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "content": "This should fail",
    "rating": 5
}

### Try to delete non-existent comment
DELETE {{baseUrl}}/comments/999
Authorization: Bearer {{token}}

### Try to update comment without auth
PUT {{baseUrl}}/comments/123
Content-Type: application/json

{
    "content": "This should fail",
    "rating": 5
}

### Try to delete comment without auth
DELETE {{baseUrl}}/comments/123

### Example responses:

# Create comment response
# {
#     "success": true,
#     "data": {
#         "id": "65ae1234b5c3e1234567890a",
#         "solution_slug": "test-solution",
#         "content": "This is a test comment",
#         "rating": 5,
#         "created_at": "2024-01-22T10:30:00",
#         "created_by": "test",
#         "updated_at": "2024-01-22T10:30:00",
#         "updated_by": "test"
#     }
# }

# Get comments response
# {
#     "success": true,
#     "data": [
#         {
#             "id": "65ae1234b5c3e1234567890a",
#             "solution_slug": "test-solution",
#             "content": "This is a test comment",
#             "rating": 5,
#             "created_at": "2024-01-22T10:30:00",
#             "created_by": "test",
#             "updated_at": "2024-01-22T10:30:00",
#             "updated_by": "test"
#         }
#     ],
#     "total": 1,
#     "skip": 0,
#     "limit": 100
# }

# Error responses examples:

# Not found error
# {
#     "success": false,
#     "error": "Comment not found"
# }

# Permission error
# {
#     "success": false,
#     "error": "You don't have permission to update this comment"
# }

# Authentication error
# {
#     "success": false,
#     "error": "Not authenticated"
# }

### Get my comments (default sort by created_at desc)
GET {{baseUrl}}/comments/my/
Content-Type: application/json
Authorization: Bearer {{token}}

### Get my comments with custom pagination
GET {{baseUrl}}/comments/my/?skip=10&limit=5
Content-Type: application/json
Authorization: Bearer {{token}}

### Get my comments sorted by updated_at ascending
GET {{baseUrl}}/comments/my/?sort=updated_at
Content-Type: application/json
Authorization: Bearer {{token}}

### Get my comments sorted by created_at ascending
GET {{baseUrl}}/comments/my/?sort=created_at
Content-Type: application/json
Authorization: Bearer {{token}}

### Try to get my comments without auth token (should fail)
GET {{baseUrl}}/comments/my/
Content-Type: application/json

### Try to get my comments with invalid sort field (should fail)
GET {{baseUrl}}/comments/my/?sort=invalid_field
Content-Type: application/json
Authorization: Bearer {{token}}

### Example responses for my comments:

# Success response
# {
#     "success": true,
#     "data": [
#         {
#             "id": "comment123",
#             "content": "This is my comment",
#             "solution_slug": "my-solution",
#             "username": "test",
#             "full_name": "Test User",
#             "created_at": "2024-01-22T10:30:00",
#             "updated_at": "2024-01-22T10:30:00"
#         }
#     ],
#     "total": 1,
#     "skip": 0,
#     "limit": 20
# }

# Error - Not authenticated
# {
#     "detail": "Not authenticated"
# }

# Error - Invalid sort field
# {
#     "detail": "Invalid sort field: invalid_field. Valid fields are: created_at, updated_at"
# } 