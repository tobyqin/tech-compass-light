@baseUrl = http://127.0.0.1:8000/api
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwiZXhwIjoyMDUzMjI2OTczfQ.cMGhHbnYwkuPxmbcJezfYsflyLX-NFsAErPbIxD5qC0
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwiZXhwIjoyMDUzMjI2OTczfQ.cMGhHbnYwkuPxmbcJezfYsflyLX-NFsAErPbIxD5qC0

### Get all solutions (basic)
GET {{baseUrl}}/solutions
Content-Type: application/json

### Get solutions with pagination
GET {{baseUrl}}/solutions?skip=0&limit=5
Content-Type: application/json

### Get solutions with filters
GET {{baseUrl}}/solutions?category=Development&department=Engineering&team=Platform&recommend_status=ADOPT&stage=PRODUCTION&review_status=APPROVED&sort=-created_at
Content-Type: application/json

### Get solutions filtered by single tag
GET {{baseUrl}}/solutions?tags=docker
Content-Type: application/json

### Get solutions filtered by multiple tags (AND relationship)
GET {{baseUrl}}/solutions?tags=docker,kubernetes,cloud
Content-Type: application/json

### Get solutions with combined filters (tags and other filters)
GET {{baseUrl}}/solutions?tags=python,api&department=Engineering&stage=PRODUCTION&sort=-created_at
Content-Type: application/json

### Get all departments
GET {{baseUrl}}/solutions/departments
Content-Type: application/json

### Get specific solution by slug
GET {{baseUrl}}/solutions/my-solution
Content-Type: application/json

### Create new solution (requires auth)
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Docker",
    "brief": "Enterprise container platform",
    "description": "Docker container service for enterprise applications",
    "category": "Infrastructure",
    "department": "Engineering",
    "team": "Platform",
    "team_email": "platform@company.com",
    "maintainer_id": "johndoe",
    "maintainer_name": "John Doe",
    "maintainer_email": "john@company.com",
    "official_website": "https://docker.com",
    "documentation_url": "https://docs.docker.com",
    "demo_url": "https://demo.docker.com",
    "version": "24.0.7",
    "tags": ["docker", "container", "infrastructure"],
    "pros": ["Industry standard", "Easy to use", "Well documented"],
    "cons": ["Resource intensive"],
    "stage": "PRODUCTION",
    "recommend_status": "ADOPT"
}

### Update solution (requires auth)
PUT {{baseUrl}}/solutions/my-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "description": "Updated description",
    "brief": "Updated brief overview",
    "adoption_level": "ENTERPRISE",
    "adoption_user_count": 300,
    "recommend_status": "TRIAL",
    "stage": "UAT",
    "tags": ["testing", "development", "updated"]
}

### Delete solution (requires auth)
DELETE {{baseUrl}}/solutions/my-solution
Authorization: Bearer {{token}}

### Test error cases

### Try to create solution with missing required fields
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Invalid Solution",
    "description": "Missing brief field"
}

### Try to create solution with missing brief field
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Invalid Solution",
    "description": "Solution without brief field",
    "department": "Engineering",
    "team": "Platform"
}

### Try to create solution with invalid recommend status
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Invalid Solution",
    "description": "Testing invalid recommend status",
    "recommend_status": "INVALID",
    "department": "Engineering",
    "team": "Platform"
}

### Try to create solution with invalid stage
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Invalid Solution",
    "description": "Testing invalid stage",
    "recommend_status": "ADOPT",
    "department": "Engineering",
    "team": "Platform",
    "stage": "INVALID"
}

### Try to get non-existent solution
GET {{baseUrl}}/solutions/non-existent-solution
Content-Type: application/json

### Try to update review status as non-superuser (should fail)
PUT {{baseUrl}}/solutions/my-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "review_status": "APPROVED"
}

### Try to update without auth token
PUT {{baseUrl}}/solutions/my-solution
Content-Type: application/json

{
    "description": "This should fail without token"
}

### Try to update non-existent solution
PUT {{baseUrl}}/solutions/non-existent-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "description": "This should fail with 404"
}

### Try to delete non-existent solution
DELETE {{baseUrl}}/solutions/non-existent-solution
Authorization: Bearer {{token}}

### Try to create solution with invalid adoption level
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Invalid Solution",
    "description": "Testing invalid adoption level",
    "brief": "A brief overview",
    "adoption_level": "INVALID",
    "department": "Engineering",
    "team": "Platform"
}

### Create test solutions with different tag combinations (requires auth)

### Solution with docker tag only
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Docker Basic Service",
    "brief": "Basic docker service",
    "description": "Basic docker container service",
    "category": "Infrastructure",
    "department": "Engineering",
    "team": "Platform",
    "team_email": "platform@company.com",
    "maintainer_id": "johndoe",
    "maintainer_name": "John Doe",
    "maintainer_email": "john@company.com",
    "tags": ["docker"],
    "stage": "PRODUCTION",
    "recommend_status": "ADOPT"
}

### Solution with docker and kubernetes tags
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Docker Kubernetes Service",
    "brief": "Docker with Kubernetes",
    "description": "Docker container service with Kubernetes orchestration",
    "category": "Infrastructure",
    "department": "Engineering",
    "team": "Platform",
    "team_email": "platform@company.com",
    "maintainer_id": "johndoe",
    "maintainer_name": "John Doe",
    "maintainer_email": "john@company.com",
    "tags": ["docker", "kubernetes"],
    "stage": "PRODUCTION",
    "recommend_status": "ADOPT"
}

### Solution with all three tags
POST {{baseUrl}}/solutions
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "name": "Cloud Container Platform",
    "brief": "Complete cloud container platform",
    "description": "Cloud-based container platform with Kubernetes orchestration",
    "category": "Infrastructure",
    "department": "Engineering",
    "team": "Platform",
    "team_email": "platform@company.com",
    "maintainer_id": "johndoe",
    "maintainer_name": "John Doe",
    "maintainer_email": "john@company.com",
    "tags": ["docker", "kubernetes", "cloud"],
    "stage": "PRODUCTION",
    "recommend_status": "ADOPT"
}

### Verify AND relationship:
# 1. This should return all solutions with docker tag
GET {{baseUrl}}/solutions?tags=docker
Content-Type: application/json

# 2. This should return only solutions with both docker and kubernetes tags
GET {{baseUrl}}/solutions?tags=docker,kubernetes
Content-Type: application/json

# 3. This should return only the solution with all three tags
GET {{baseUrl}}/solutions?tags=docker,kubernetes,cloud
Content-Type: application/json

### Example responses:

# Get all solutions response
# {
#     "success": true,
#     "data": [
#         {
#             "name": "My Solution",
#             "description": "A comprehensive solution for testing",
#             "category": "Development",
#             "department": "Engineering",
#             "team": "Platform",
#             "team_email": "platform@company.com",
#             "maintainer_id": "johndoe",
#             "maintainer_name": "John Doe",
#             "maintainer_email": "john@company.com",
#             "official_website": "https://solution.com",
#             "documentation_url": "https://docs.solution.com",
#             "demo_url": "https://demo.solution.com",
#             "version": "1.0.0",
#             "tags": ["testing", "development"],
#             "pros": ["Easy to use", "Well documented"],
#             "cons": ["Learning curve"],
#             "stage": "DEVELOPING",
#             "recommend_status": "ADOPT",
#             "review_status": "PENDING",
#             "id": "...",
#             "slug": "my-solution",
#             "created_at": "2024-01-22T00:00:00",
#             "created_by": "test",
#             "updated_at": "2024-01-22T00:00:00",
#             "updated_by": "test"
#         }
#     ],
#     "total": 1,
#     "skip": 0,
#     "limit": 10
# }

# Error response example
# {
#     "detail": "Solution not found"
# }

### Get my solutions (default sort by name)
GET {{baseUrl}}/solutions/my/
Content-Type: application/json
Authorization: Bearer {{token}}

### Get my solutions sorted by creation date (newest first)
GET {{baseUrl}}/solutions/my/?sort=-created_at
Content-Type: application/json
Authorization: Bearer {{token}}

### Get my solutions with pagination
GET {{baseUrl}}/solutions/my/?skip=0&limit=5
Content-Type: application/json
Authorization: Bearer {{token}}

### Try to get my solutions without authentication (should fail)
GET {{baseUrl}}/solutions/my/
Content-Type: application/json

### Permission test cases

### Try to update another user's solution (should fail)
PUT {{baseUrl}}/solutions/other-user-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "description": "Try to update someone else's solution",
    "brief": "This should fail"
}

### Try to delete another user's solution (should fail)
DELETE {{baseUrl}}/solutions/other-user-solution
Authorization: Bearer {{token}}

### Try to update solutions by name without permission (should fail)
PUT {{baseUrl}}/solutions/by-name/other-user-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "description": "Try to update someone else's solutions",
    "brief": "This should fail"
}

### Try to delete solutions by name without permission (should fail)
DELETE {{baseUrl}}/solutions/by-name/other-user-solution
Authorization: Bearer {{token}}

### Example error responses for permission checks:

# Permission denied error
# {
#     "success": false,
#     "error": "You don't have permission to update this solution"
# }

# Permission denied for review status
# {
#     "success": false,
#     "error": "Only superusers can modify the review status"
# }

### Superuser-only endpoints test cases

### Try to update solutions by name as non-superuser (should fail)
PUT {{baseUrl}}/solutions/by-name/test-solution
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "description": "Try to update solutions by name as non-superuser",
    "brief": "This should fail"
}

### Try to delete solutions by name as non-superuser (should fail)
DELETE {{baseUrl}}/solutions/by-name/test-solution
Authorization: Bearer {{token}}

### Update solutions by name as superuser
PUT {{baseUrl}}/solutions/by-name/test-solution
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
    "description": "Update all solutions with this name",
    "brief": "Updated by superuser",
    "review_status": "APPROVED"
}

### Delete solutions by name as superuser
DELETE {{baseUrl}}/solutions/by-name/test-solution
Authorization: Bearer {{adminToken}}

### Example error responses for superuser-only endpoints:

# Non-superuser access denied error
# {
#     "success": false,
#     "error": "Not enough permissions"
# }
