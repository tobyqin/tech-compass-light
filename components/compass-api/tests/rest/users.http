@baseUrl = http://localhost:8000/api
@adminToken = ''
@userToken = ''

### Login as admin
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/x-www-form-urlencoded

username=admin&password=admin123

### Store admin token
@adminToken = {{login.response.body.access_token}}

### Admin: Create a new local user
POST {{baseUrl}}/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "username": "testuser",
    "email": "test@example.com",
    "full_name": "Test User",
    "password": "testpass123"
}

### Try to create user without admin privileges (should fail)
POST {{baseUrl}}/users
Content-Type: application/json

{
    "username": "testuser2",
    "email": "test2@example.com",
    "full_name": "Test User 2",
    "password": "testpass123"
}

### Login as test user
# @name userLogin
POST {{baseUrl}}/auth/login
Content-Type: application/x-www-form-urlencoded

username=testuser&password=testpass123

### Store user token
@userToken = {{userLogin.response.body.access_token}}

### Get current user info
GET {{baseUrl}}/users/me
Authorization: Bearer {{userToken}}

### Get user by username
GET {{baseUrl}}/users/testuser
Authorization: Bearer {{userToken}}

### Get all users (with pagination)
GET {{baseUrl}}/users?skip=0&limit=10
Authorization: Bearer {{userToken}}

### Update user's own information
PUT {{baseUrl}}/users/testuser
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "email": "updated@example.com",
    "full_name": "Updated User"
}

### Update user's password
PUT {{baseUrl}}/users/testuser/password
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "current_password": "testpass123",
    "new_password": "newpass123"
}

### Try to update another user's info (should fail)
PUT {{baseUrl}}/users/admin
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "email": "hack@example.com"
}

### Admin: Update user information
PUT {{baseUrl}}/users/manage/testuser
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "email": "admin.updated@example.com",
    "full_name": "Admin Updated User",
    "is_active": true,
    "is_superuser": false,
    "password": "adminpass123"
}

### Admin: Update only user's status
PUT {{baseUrl}}/users/manage/testuser
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "is_active": false
}

### Admin: Delete user
DELETE {{baseUrl}}/users/manage/testuser
Authorization: Bearer {{adminToken}}

### Try to delete user as non-superuser (should fail)
DELETE {{baseUrl}}/users/testuser
Authorization: Bearer {{userToken}}

### Delete user as superuser
DELETE {{baseUrl}}/users/testuser
Authorization: Bearer {{adminToken}}

### Try to delete admin account (should fail)
DELETE {{baseUrl}}/users/admin
Authorization: Bearer {{adminToken}}

### Admin: Create an external user
POST {{baseUrl}}/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "username": "external_user",
    "email": "external@example.com",
    "full_name": "External User",
    "password": ""
}

### Try to update external user info (should fail)
PUT {{baseUrl}}/users/external_user
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "email": "new.external@example.com"
}

### Try to update external user password (should fail)
PUT {{baseUrl}}/users/external_user/password
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "current_password": "",
    "new_password": "newpass"
}

### Admin: Update external user status (should succeed)
PUT {{baseUrl}}/users/manage/external_user
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "is_active": false,
    "is_superuser": true
}

### Admin: Try to update external user other fields (should fail)
PUT {{baseUrl}}/users/manage/external_user
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "email": "admin.external@example.com",
    "full_name": "Updated External User",
    "password": "newpass"
}

### Admin: Try to delete external user (should fail)
DELETE {{baseUrl}}/users/manage/external_user
Authorization: Bearer {{adminToken}}

### Example responses:

# Get all users response
# {
#     "success": true,
#     "data": [
#         {
#             "username": "test",
#             "email": "test@example.com",
#             "full_name": "Test User",
#             "role": "USER",
#             "is_active": true,
#             "created_at": "2024-01-22T10:30:00",
#             "updated_at": "2024-01-22T10:30:00"
#         },
#         {
#             "username": "other-user",
#             "email": "other@example.com",
#             "full_name": "Other User",
#             "role": "USER",
#             "is_active": true,
#             "created_at": "2024-01-22T10:35:00",
#             "updated_at": "2024-01-22T10:35:00"
#         }
#     ],
#     "total": 2,
#     "skip": 0,
#     "limit": 10
# }

# Single user response
# {
#     "success": true,
#     "data": {
#         "username": "test",
#         "email": "test@example.com",
#         "full_name": "Test User",
#         "role": "USER",
#         "is_active": true,
#         "created_at": "2024-01-22T10:30:00",
#         "updated_at": "2024-01-22T10:30:00"
#     }
# }

# Create/Update user response
# {
#     "success": true,
#     "data": {
#         "username": "newuser",
#         "email": "newuser@example.com",
#         "full_name": "New User",
#         "role": "USER",
#         "is_active": true,
#         "created_at": "2024-01-22T10:30:00",
#         "updated_at": "2024-01-22T10:30:00"
#     }
# }

# Delete user response
# {
#     "success": true,
#     "data": {
#         "message": "User deleted successfully"
#     }
# }

# Error responses examples:

# Not found error
# {
#     "success": false,
#     "error": "User not found"
# }

# Validation error - duplicate username
# {
#     "success": false,
#     "error": "Username already exists"
# }

# Permission error
# {
#     "success": false,
#     "error": "You don't have permission to update this user"
# }

# Authentication error
# {
#     "success": false,
#     "error": "Not authenticated"
# } 